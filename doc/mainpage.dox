/*
 * Copyright (c) 2016-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

/**

\defgroup MatchFunc 	Stateless datapath blocks - implemented as functions
	\defgroup nvhls_int	
        \brief Integer library with built-in support for sc_int and ac_int datatypes
		\ingroup MatchFunc
	\defgroup Crossbar 	
        \brief Configurable nxn crossbar datapath
		\ingroup MatchFunc
	\defgroup one_hot_to_bin	
        \brief One-hot to binary convertor
		\ingroup MatchFunc

\defgroup MatchClass	Loosly-timed units with state - implemented as classes
	\defgroup Arbiter 	
        \brief Configurable n inputs arbiter
		\ingroup MatchClass
	\defgroup MemArray	
        \brief Abstract Memory Class
		\ingroup MatchClass
	\defgroup FIFO	
        \brief Configurable FIFO class
		\ingroup MatchClass
	\defgroup nvhls_vector	
        \brief Vector helper container with vector operations
		\ingroup MatchClass
	\defgroup Connections	
        \brief Modular IO supporting latency-insensitive channels
		\ingroup MatchClass
	\defgroup ArbitratedCrossbar
        \brief Crossbar with conflict arbitration and queuing
		\ingroup MatchClass
	\defgroup ArbitratedScratchpad
        \brief Scratchpad memories with arbitration and queuing
		\ingroup MatchClass
	\defgroup ReorderBuffer
        \brief Out-of-order writes into queue, in-order reads
		\ingroup MatchClass

\defgroup MatchModule 	    Timed units - implemented as sc_module
	\defgroup WHVCRouter 	
        \brief Wormhole router with virtual channels
		\ingroup MatchModule
	\defgroup SerDes	
        \brief N-bit packets to/from M cycles of (N/M)-bit packets
		\ingroup MatchModule
	\defgroup Cache	
        \brief Direct-mapped Cache design
		\ingroup MatchModule
	\defgroup Scratchpad	
        \brief Banked Memory Array with Crossbar
		\ingroup MatchModule
	\defgroup FlitMplex	
        \brief Mux multiple input channels to single output channel
		\ingroup MatchModule
	\defgroup FlitDeMplex	
        \brief DeMux single input channel to one of multiple output channels
		\ingroup MatchModule
	\defgroup AXI	
        \brief Manager/Subordinate Interfaces & bridges for AXI interconnect
		\ingroup MatchModule

\defgroup MatchUtil     Misc utilities and auxiliary constructs
	\defgroup TypeToBits	
        \brief Convert any datatype to bit-vector
        \ingroup MatchUtil
	\defgroup nvhls_packet	
        \brief Configurable packet and flit classes
		\ingroup MatchUtil
	\defgroup comptrees	
        \brief Compile-time minmax tree
		\ingroup MatchUtil
	\defgroup DebugPrint	
        \brief debug print statements 
		\ingroup MatchUtil
	\defgroup nvhls_array	
        \brief A variant of synthesizable array implementation 
		\ingroup MatchUtil
	\defgroup Assertions	
        \brief Macros for synthesizable and non-synthesizable assertions
		\ingroup MatchUtil
	\defgroup Marshaller	
        \brief Marshaller is used to automatically convert types to logic vector and vice versa
		\ingroup MatchUtil
	\defgroup StaticMax	
        \brief StaticMax Class: returns the larger value between two unsigned integers
		\ingroup MatchUtil
	\defgroup BitUnion2	
        \brief BitUnion2 class: A union class to hold two Marshallers.
		\ingroup MatchUtil
	\defgroup nvhls_module	
        \brief Matchlib Module class: a wrapper of sc_module with tracing and stats support.
		\ingroup MatchUtil
	\defgroup Tracer	
        \brief Tracer class to dump simulation stats to an output stream.
		\ingroup MatchUtil
	\defgroup NVHLSVerify
        \brief Verification co-simulation support.
		\ingroup MatchUtil
    \defgroup Testbench Non-synthesizable components suitable for testbench construction
        \ingroup MatchUtil
        \defgroup Pacer 
            \brief Random stall generator
            \ingroup Testbench
        \defgroup set_random_seed 
            \brief Set random seed
            \ingroup Testbench
        \defgroup gen_random_payload 
            \brief Generate Random payload of any type
            \ingroup Testbench
        \defgroup get_rand 
            \brief Generate Random integer value of desired width
            \ingroup Testbench

\mainpage

\tableofcontents

\section sec_intro What is MatchLib?

\par
MatchLib is a library of reusable modules & functions for common HW structures, somewhat analogous to STL in programming world or DesignWare in ASIC world.
Key motivations are:
- Encapsulate verified functionality
- Encapsulate QoR-optimized implementation
- Heavy use of templates and other C++ features for parameterization

\par
Components for common HW structures can be in one of the three forms:
- [C++ functions : datapath description] (group___match_func.html)
- [C++ classes : state updating methods] (group___match_class.html)
- [SystemC modules : self-contained modules] (group___match_module.html)

\par
In addition, there is a collection of [auxiliary non-synthesizable components] (group___match_util.html) useful for building testbench and debug infrastructure of developed HW.

\section sec_directory Directory organization

- cmod
\par
    C model code
    
    - MemModel 
    \par 
        Memory model code, can be used for quick estimation of area and timing of various configurations of memory array. This is the location of C code implementation and corresponding hls scripts can be found under hls directory.

    - examples
    \par
        Simple examples of synthesizable code. Include counter and various more advanced examples demonstrating connections (inter unit communication channels).

    - include
    \par
        Majority of component implementations are located here.
    
        - axi
        \par 
        Contains all axi-related components

        - testbench
        \par
        Auxiliary non-synthesizable components to be used in testbenches.

    - unittests
    \par
        Collection of testbenches for MatchLib components, each testbench is in dedicated sub-directory.

- hls
\par
    High-Level-Synthesis (hls) - includes examples of hls setup scripts for synthesizing using Mentor Graphics Catapult. Each example is in dedicated sub-directory.

- doc
\par
    Sources for generation of this Doxygen documentation. 

\section sec_license License

\par

Copyright (c) 2016-2019, NVIDIA CORPORATION.  All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

When indicated in the source code, some compute functions in MatchLib
have been derived from code in the Algorithmic C (tm) Datatypes v3.7.1 distributed
with the following license:

    Algorithmic C (tm) Datatypes                                          
                                                                          
    Software Version: 3.7                                                 
                                                                          
    Release Date    : Sat Jun 25 13:27:03 PDT 2016                        
    Release Type    : Production Release                                  
    Release Build   : 3.7.1                                               
                                                                          
    Copyright 2004-2016, Mentor Graphics Corporation,                     
                                                                          
    All Rights Reserved.                                                  

    Licensed under the Apache License, Version 2.0 (the "License");       
    you may not use this file except in compliance with the License.      
    You may obtain a copy of the License at                               
                                                                          
        http://www.apache.org/licenses/LICENSE-2.0                        
                                                                          
    Unless required by applicable law or agreed to in writing, software   
    distributed under the License is distributed on an "AS IS" BASIS,     
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       
    implied.                                                              
    See the License for the specific language governing permissions and   
    limitations under the License.                                        

                                                                          
    The most recent version of this package is available at github.       
                                                                          


*/

